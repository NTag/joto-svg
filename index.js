const stringToSVG = require('./joto-text');
const svgpath = require('svgpath');

const francePath =
  'M264.73 3.4c-5.01 2.62-7.41 3.59-10.76 4.37-3.31 0.74-5.2 1.52-7.92 3.18l-3.54 2.16-1.42 4.69-1.48 4.65 0.56 8 0.5 7.96-1.42 5.7c-1.43 5.52-1.61 5.89-5.06 10.72-3.36 4.69-3.91 5.2-8.42 8.14-4.37 2.85-5.29 3.22-10.72 4.65-6.72 1.7-12.56 4.51-18.86 9.06-3.59 2.62-3.68 2.71-4.28 5.43-0.51 2.3-0.97 3.13-2.9 5.11l-2.3 2.34 2.07 1.89c1.15 1.06 2.53 1.93 3.04 1.93 1.33 0 1.15 0.78-0.28 1.1-0.69 0.18-2.53 1.56-4.14 3.13-2.9 2.76-2.94 2.81-6.11 3.04-3.04 0.18-3.31 0.14-4.97-1.15-1.43-1.15-3.08-1.7-9.11-3.04-6.35-1.43-14.44-2.62-17.94-2.62-0.64 0-1.15 0.32-1.29 0.92-0.14 0.51-0.55 0.92-0.96 0.92-0.55 0-0.74-0.46-0.74-1.79 0-1.56-0.28-1.98-2.07-3.45-1.93-1.61-2.07-1.84-2.07-3.96 0-1.84 0.18-2.35 0.97-2.81 0.87-0.46 0.97-0.78 0.73-3.03-0.14-1.38-0.37-2.67-0.5-2.81-0.18-0.14-1.98-0.51-4.05-0.87-3.59-0.55-3.82-0.55-4.74 0.32-0.78 0.74-1.61 0.92-3.96 0.92-2.9 0-2.99-0.05-3.49-1.38l-0.51-1.38-4.14 0c-5.11 0-5.66 0.41-4.28 3.17 0.64 1.2 0.97 2.71 0.97 4.28 0 1.33 0.46 4.51 1.01 7.04 0.92 4.32 1.2 4.92 5.02 10.76l4.04 6.17 0.56 11.08c0.55 10.95 0.55 11.13 1.84 12.98l1.24 1.84-1.61 1.74c-0.97 1.01-1.89 1.61-2.3 1.48-0.37-0.14-1.84-0.28-3.27-0.28-2.58 0-2.62-0.05-3.68-1.89-0.74-1.29-1.29-1.75-1.84-1.61-0.41 0.14-2.76 0.55-5.15 0.97-2.39 0.41-4.51 1.01-4.69 1.29-1.29 2.25-1.15 2.25-6.53 0.55-2.81-0.87-5.11-1.52-5.11-1.47-0.05 0.05-0.92 1.33-1.98 2.9-1.66 2.48-2.07 2.81-4.09 3.26-2.07 0.51-2.3 0.46-3.41-0.6-0.64-0.6-2.16-2.81-3.4-4.92-1.2-2.07-3.54-5.57-5.2-7.73l-2.99-3.95-4.87-0.65c-5.75-0.69-12.05-0.6-12.56 0.19-0.18 0.32-0.6 1.75-0.88 3.17l-0.55 2.67-5.2 0c-3.91 0-5.24 0.14-5.24 0.55-0.05 1.61-0.69 1.75-3.68 0.74-2.76-0.92-3.22-0.92-7.54-0.42-6.03 0.69-13.29 2.35-18.36 4.19l-4.05 1.47-1.65 3.31-1.61 3.32 1.88 3.77 1.94 3.82 3.31-0.28c1.84-0.14 4.23-0.69 5.38-1.2l2.07-0.92 2.21 0.92c1.66 0.69 2.21 1.2 2.07 1.75-0.09 0.55-0.55 0.78-1.29 0.74-2.62-0.23-9.2-0.28-9.38-0.09-0.09 0.09-0.32 1.33-0.51 2.76l-0.32 2.53 2.11 0.5c1.47 0.32 2.85 0.32 4.28 0.05 2.62-0.6 5.89 0.18 5.48 1.29-0.14 0.41-0.28 1.1-0.28 1.61 0 1.15-1.93 1.2-3.59 0.04-1.01-0.64-2.07-0.74-5.89-0.64-4.28 0.14-4.78 0.23-6.11 1.38-1.56 1.29-2.71 4.65-1.84 5.2 0.28 0.14 2.53 0.83 5.06 1.56l4.55 1.24 0.05 2.85c0 2.44 0.28 3.22 1.97 6.03l1.94 3.22 2.94 0.32 2.99 0.37 2.07-2.3c1.79-2.02 2.3-2.3 3.82-2.3 1.29 0 2.02 0.32 2.99 1.33 0.97 1.01 2.35 1.61 5.93 2.58 4.19 1.15 4.92 1.52 6.67 3.31l1.93 1.98-1.79 0c-2.81 0-3.08 0.37-2.67 3.27l0.37 2.48 2.35 0.41c2.3 0.37 2.44 0.32 5.24-1.56 1.56-1.06 3.5-2.12 4.28-2.35 1.29-0.37 1.61-0.23 2.99 1.11 1.52 1.43 1.56 1.52 1.38 4.78l-0.14 3.36 2.16 0.92c1.2 0.51 2.25 0.92 2.44 0.92 0.14 0 0.87-0.74 1.66-1.61 1.93-2.16 3.5-2.16 5.42 0l1.43 1.61 4.6-0.78 4.65-0.74 1.15 1.15 1.15 1.15-0.6 4.33-0.65 4.32 1.38 2.85 1.38 2.9 3.73-0.28 3.68-0.32 1.06 3.27c1.01 3.17 1.1 3.27 2.76 3.59 3.04 0.51 3.36 0.69 4.32 2.66l0.92 1.94-1.88 3.03c-1.38 2.12-2.07 3.86-2.4 5.94l-0.5 2.94 4.41 4.14c3.96 3.68 4.42 4.32 4.42 5.75 0 0.87 0.14 2.71 0.32 4.05 0.28 2.39 0.41 2.58 3.64 5.29 2.53 2.12 4.46 3.22 8.09 4.69 7.64 3.08 11.27 5.11 12.1 6.67l0.74 1.38-2.81 0c-2.16 0-3.36-0.32-5.52-1.38-1.52-0.78-2.9-1.38-3.08-1.38-0.32 0-4.28 6.07-4.28 6.53 0 0.09 1.24 1.24 2.71 2.53l2.72 2.39 2.07-1.79c1.98-1.75 2.21-1.84 5.24-1.84l3.18 0 2.34 2.44c2.3 2.35 2.35 2.44 2.53 5.52 0.14 3.04 0.09 3.13-1.29 4l-1.47 0.97-1.19-2.07c-1.47-2.53-6.35-6.9-6.77-6.12-0.18 0.32-0.64 1.79-1.05 3.26l-0.69 2.72 3.26 3.36 3.22 3.35-0.27 4.51-0.33 4.51 5.8 2.99c5.15 2.67 6.21 3.45 10.17 7.41l4.41 4.41 0.37 4.56c0.64 6.9 0.6 7.22-0.69 4.14-1.38-3.31-7.73-11.87-10.58-14.26l-2.16-1.75-1.75 0.78c-1.01 0.46-2.12 1.15-2.44 1.56-0.6 0.69-1.38 10.3-2.94 35.01l-0.28 4.37 1.98 2.44c1.06 1.38 1.84 2.58 1.7 2.71-0.14 0.09-1.01 0-1.98-0.27-1.1-0.32-1.84-0.32-2.02-0.05-0.14 0.23-0.64 3.5-1.1 7.22-2.39 20.33-3.5 26.86-5.89 34.64-1.29 4.19-2.85 10.4-3.54 13.85l-1.25 6.21-3.54 4.14c-3.5 4.09-3.54 4.19-7.08 5.24-1.98 0.6-3.63 1.15-3.73 1.2-0.14 0.09 2.07 3.36 3.45 5.19 0.09 0.14 3.08 0.69 6.63 1.25 3.59 0.6 6.58 1.1 6.62 1.19 0.09 0.09 0.28 1.79 0.46 3.82 0.32 3.68 0.32 3.73-0.87 4.28-1.06 0.46-1.2 0.78-1.2 2.85 0 2.12 0.09 2.3 1.29 2.53 3.4 0.74 3.17 0.83 4.05-1.38 0.41-1.15 0.92-2.07 1.1-2.07 0.14 0 0.64 0.69 1.01 1.56 0.55 1.1 1.93 2.25 4.88 4.14l4.09 2.58 6.17 0 6.16 0 3.82 5.06c2.07 2.81 4.05 5.06 4.37 5.06 0.32 0 2.35-0.51 4.51-1.15 4.83-1.43 5.01-1.43 10.3 0.09l4.32 1.2 0.14 2.11 0.14 2.12 8.97 0.97c8.79 0.97 14.86 0.97 22.82-0.1l1.93-0.23-1.06-4.14-1.06-4.18 1.01 0.27c1.06 0.28 10.86 1.84 14.59 2.35 1.93 0.23 2.25 0.46 3.49 2.44l1.34 2.16 4.14-0.28c2.25-0.14 4.14-0.28 4.14-0.23 0.05 0.05 0.83 1.61 1.79 3.5 0.97 1.89 1.79 3.54 1.84 3.59 0.09 0.09 0.92-0.64 1.84-1.66l1.66-1.84 4.27 1.43 4.33 1.42 0.32 2.35 0.28 2.35 4.04 2.02c4.05 1.98 4.05 1.98 4.83 4.46l0.79 2.49 4-0.14 3.95-0.14 0.42-1.43c0.37-1.2 0.74-1.52 2.11-1.74 3.73-0.6 5.2-0.32 8.05 1.51 2.58 1.66 3.13 1.79 6.86 2.03l4.09 0.23 4.88-4.28c4.37-3.77 5.15-4.28 7.22-4.55 1.29-0.18 3.17-0.78 4.23-1.29 1.7-0.87 1.93-1.1 1.7-2.16-0.18-0.64-0.74-3.17-1.33-5.57-0.78-3.17-1.1-6.39-1.29-11.64l-0.27-7.22 2.48-5.43c2.35-5.11 2.67-5.57 6.67-9.34 3.73-3.5 4.51-4 6.35-4.27 2.21-0.28 2.12-0.23 16.79-11.46l5.43-4.14 2.16 2.12 2.16 2.11 5.29 0.33c4.23 0.23 5.8 0.14 7.77-0.46 1.38-0.41 2.76-0.74 3.04-0.74 0.23 0 1.15 1.2 1.98 2.67l1.47 2.71 7.22 0.28c12.33 0.55 14.63 0.46 16.33-0.6 1.06-0.64 2.35-0.92 4.19-0.92l2.62 0 0 2.9 0 2.85 8.19 2.21c4.46 1.2 10.72 2.62 13.84 3.17 5.66 0.97 5.75 0.97 11.27 0.14l5.57-0.87 3.04-2.9 3.03-2.9 5.61-0.87c3.08-0.46 5.66-0.92 5.8-1.02 0.09-0.09 0.32-2.53 0.51-5.38l0.32-5.15 3.36-1.84c3.27-1.79 3.5-2.02 5.15-5.34 1.52-2.99 2.07-3.63 4-4.69 2.02-1.1 2.39-1.61 3.73-4.64l1.47-3.41 6.39-3.26c9.15-4.65 8.37-3.86 6.63-6.9l-1.43-2.58 1.93-2.62c1.24-1.7 2.25-3.82 2.9-6.12l1.01-3.45-1.56-4.37c-0.87-2.39-1.66-4.42-1.75-4.51-0.09-0.09-0.87 1.24-1.79 2.99l-1.66 3.18-6.35-0.65c-5.38-0.55-6.53-0.78-7.77-1.75-1.2-0.92-1.98-1.1-4.37-1.1-2.94 0-2.99-0.05-7.18-3.13-4-2.94-4.23-3.17-4.09-4.64 0.09-1.43 0.28-1.66 2.16-2.26l2.07-0.69-1.79-1.42c-1.01-0.78-2.3-1.84-2.95-2.4l-1.15-0.92 2.35-1.84 2.34-1.79 0.05-6.95 0-6.94-4.65-1.29c-2.58-0.74-4.92-1.61-5.24-1.93-0.32-0.28-0.74-1.33-0.92-2.3-0.37-2.16-0.83-2.71-3.08-3.87-1.7-0.87-1.75-0.97-1.75-3.4l0-2.53 3.73 0 3.68 0 5.01-3.59 5.06-3.54 0-5.15 0-5.11-3.86-2.85-3.87-2.85-0.27-3.59-0.33-3.54-2.34-0.28c-1.66-0.23-2.9-0.69-4-1.61-1.43-1.15-1.66-1.66-1.8-3.49l-0.14-2.17 2.12-0.92c1.61-0.74 2.53-1.61 4.14-3.95l2.02-3.04-1.7-2.34c-6.49-9.06-6.49-9.02-7.96-9.02-0.97 0-1.33-0.18-1.19-0.6 0.14-0.28 0.78-1.84 1.47-3.4l1.24-2.85-4.14-4.6-4.18-4.56-3.68 2.53c-3.4 2.39-3.91 2.58-6.86 2.81-2.9 0.18-3.4 0.37-5.33 2.07l-2.17 1.84 1.61 1.65c2.16 2.21 2.16 3.54-0.04 5.66-1.29 1.24-2.53 1.89-4.69 2.44-2.76 0.69-2.94 0.69-3.55-0.09-1.79-2.25-1.75-2.39 0.79-3.45 2.25-0.97 2.48-1.24 3.91-4.23l1.51-3.27-2.3-1.38c-1.98-1.2-2.25-1.56-2.25-2.94 0-0.92 0.55-2.48 1.38-3.82 1.38-2.21 1.38-2.25 0.64-3.73l-0.78-1.47 4.92-4.6 4.88-4.6 0.28-5.52c0.18-3.04 0.51-5.89 0.69-6.3 0.28-0.55 1.29-0.87 3.17-1.11l2.71-0.32 5.98-9.52c4.19-6.72 6.16-10.4 6.67-12.19l0.69-2.62-1.47 0.32c-4.46 0.92-4.46 0.92-4.46-0.55 0-1.1 0.51-1.84 2.44-3.45 4.88-4.14 5.84-4.46 5.84-2.03 0 0.87 0.18 1.7 0.37 1.84 0.18 0.09 2.39 0.09 4.87-0.04l4.51-0.28 2.26-2.8 2.3-2.81-0.33-3.22c-0.14-1.79-0.87-4.78-1.56-6.72l-1.33-3.49 1.38-4.33 1.33-4.32-0.78-5.38-0.78-5.43 2.25-14.81 2.25-14.86 4.28-4.42 4.28-4.41 0.92-4.97c0.51-2.76 0.92-5.34 0.92-5.75 0-0.51-1.52-1.2-5.66-2.44l-5.66-1.7-5.06 0.92c-2.76 0.51-5.38 1.01-5.79 1.1-0.51 0.09-1.47-0.69-2.72-2.25-1.79-2.25-2.07-2.44-4.46-2.71-1.89-0.23-2.67-0.14-2.9 0.27-1.15 1.98-1.7 2.3-4.46 2.62l-2.85 0.33-1.84-2.17c-1.75-2.07-1.89-2.16-3.77-1.93-4.78 0.6-5.2 0.78-5.06 2.16 0.18 1.24 0.14 1.24-2.07 1.11l-2.21-0.14-5.2-6.85c-4.92-6.53-5.34-6.95-8.05-8.19-1.56-0.69-3.08-1.29-3.36-1.29-0.28 0-1.61 0.6-2.99 1.33-1.93 1.01-3.5 1.43-7.08 1.8l-4.6 0.5-2.53-2.71-2.53-2.71-2.3 2.02c-2.12 1.93-2.44 2.07-4.88 2.07l-2.62 0-3.36-3.86-3.35-3.91-7.23-2.63-7.17-2.62-1.11-3.26c-0.87-2.62-1.15-4.55-1.33-9.71-0.28-8.19-0.69-8.42-3.91-2.3-1.61 3.13-2.9 4.92-4.37 6.16l-2.12 1.8-5.06 0.14c-4.51 0.14-5.2 0.05-6.34-0.79l-1.25-0.92 0.79-1.97 0.78-1.98-1.66-1.47-1.65-1.43 0.69-3.63 0.69-3.64-1.98-1.98-1.98-1.97-3.22 0.41c-1.75 0.23-4.65 0.46-6.39 0.51l-3.22 0.09-0.56-1.66c-0.78-2.3-4.74-7.36-5.47-7.04-0.32 0.09-2.02 0.37-3.77 0.51l-3.22 0.32-1.61-2.21c-1.24-1.7-1.7-2.9-1.98-4.96-0.28-2.39-0.55-2.94-2.81-5.39-1.38-1.47-2.58-2.76-2.71-2.8-0.09-0.09-1.66 1.15-3.4 2.76l-3.27 2.9-2.16-1.25c-2.62-1.52-8.88-6.16-8.88-6.62 0-0.18 0.23-1.43 0.51-2.81 0.51-2.48 0.46-2.62-1.57-6.99-1.15-2.44-2.25-4.46-2.48-4.46-0.18 0-3.27 1.56-6.81 3.4';

module.exports = function Joto() {
  const paths = [];
  const coords = {};

  const latLngToXY = (lat, lng) => {
    if (!coords.origin) {
      throw 'Joto: coords is not defined. Have you used setCountry?';
    }

    const x = ((lng - coords.origin.lng) / coords.width) * 500;
    const y = ((coords.origin.lat - lat) / coords.height) * 500;

    return { x, y };
  };

  return {
    addString({ x, y, size, angle = 0, str, align }) {
      const path = stringToSVG(null, str, size, align, 1, null, x, y, 1, angle);

      paths.push(path);
    },
    addIconXY({ x, y, size, angle = 0, icon }) {
      if (!icon.icon) {
        throw new Error("addIconXY: icon.icon doesn't exist, are you sure you passed a font-awesome icon?");
      }

      const iconPath = icon.icon[icon.icon.length - 1];
      const iconWidth = icon.icon[0];

      const transformed = svgpath(iconPath)
        .scale(size / iconWidth, size / iconWidth)
        .translate(x, y)
        .rotate(angle)
        .round(2)
        .toString();

      paths.push(`<path fill="none" stroke="#000000" d="${transformed}"/>`);
    },
    addChart({
      position: { x, y, height, width },
      xAxis: { min: xMin, max: xMax, y: xAxisY, legend: xLegend },
      yAxis: { min: yMin, max: yMax, x: yAxisX, legend: yLegend = true },
      data,
    }) {
      if (coords.origin) {
        throw 'Joto: you cannot add a chart if you set a country';
      }

      const yToCoords = (yChart) => {
        return ((yMax - yChart) / (yMax - yMin)) * height + y;
      };
      const xToCoords = (xChart) => {
        return ((xChart - xMin) / (xMax - xMin)) * width + x;
      };

      // yAxis
      const yAxisXReal = yAxisX === undefined ? xMin : yAxisX;
      paths.push(`<path fill="none" stroke="#000000" d="M ${xToCoords(yAxisXReal)} ${y + height} V ${y}" />`);
      paths.push(
        `<path fill="none" stroke="#000000" d="M ${xToCoords(yAxisXReal) - 5} ${y + 5} L ${xToCoords(
          yAxisXReal,
        )} ${y} L ${xToCoords(yAxisXReal) + 5} ${y + 5}" />`,
      );
      if (yLegend) {
        this.addString({ x: x - 25, y: y + 5, size: 10, str: `${yMax}` });
        this.addString({ x: x - 25, y: y + height, size: 10, str: `${yMin}` });
        if (xAxisY !== undefined && yMin !== xAxisY) {
          this.addString({ x: x - 25, y: yToCoords(xAxisY) + 5, size: 10, str: `${xAxisY}` });
        }
      }

      // xAxis
      const xAxisYReal = xAxisY === undefined ? yMin : xAxisY;
      paths.push(`<path fill="none" stroke="#000000" d="M ${x} ${yToCoords(xAxisYReal)} H ${x + width}" />`);
      paths.push(
        `<path fill="none" stroke="#000000" d="M ${x + width - 5} ${yToCoords(xAxisYReal) - 5} L ${
          x + width
        } ${yToCoords(xAxisYReal)} L ${x + width - 5} ${yToCoords(xAxisYReal) + 5}" />`,
      );
      if (xLegend) {
        this.addString({ x: x - 5, y: y + height + 15, size: 10, str: `${xLegend(xMin)}` });
        // this.addString({ x: x - 5, y: y + height + 15, size: 10, str: `${xLegend(xMin)}` });
        // this.addString({ x: x - 5, y: y + height + 15, size: 10, str: `${xLegend(xMin)}` });
        this.addString({ x: x + width, y: y + height + 15, size: 10, str: `${xLegend(xMax)}` });
      }

      if (data && data.length >= 2) {
        paths.push(
          `<path fill="none" stroke="#000000" d="M ${xToCoords(data[0].x)} ${yToCoords(data[0].y)} ${data
            .slice(1)
            .map((d) => `L ${xToCoords(d.x)} ${yToCoords(d.y)}`)
            .join(' ')}" />`,
        );
      }
    },
    addIcon({ lat, lng, ...params }) {
      if (!lat && !lng) {
        this.addIconXY(params);
      } else {
        this.addIconXY({ ...params, ...latLngToXY(lat, lng) });
      }
    },
    setCountry(country) {
      // For now, only France is supported
      if (country !== 'france') {
        throw 'Joto.setCountry: only france is supported';
      }

      paths.push(`<path fill="none" stroke="#000000" d="${francePath}"/>`);
      coords.origin = {
        lat: 51,
        lng: -5,
      };
      coords.height = 51 - 41;
      coords.width = 9 + 5;
    },
    getSVG() {
      const allPaths = paths.join('');

      return `<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="500" height="500"><g xmlns="http://www.w3.org/2000/svg" fill="none" fill-rule="nonzero" stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal">${allPaths}</g></svg>`;
    },
  };
};
